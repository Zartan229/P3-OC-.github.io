@keyframes fade-in-bottom {
  0% {
    transform: translateY(10px);
    opacity: 0;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

.menu__transformation {
  $number_menu: 4;
  @for $i from 1 through $number_menu {
    &-#{$i} {
      animation: fade-in-bottom 1s ease-in-out both;
      animation-delay: $i * 0.15s;
    }
  }
}

.container {
  position: relative; /*Mise en position relative
                     pour que les "enfant" 
                     puissent prendre 
                     une positio absolue et hériter 
                     de la taille du container*/
  display: flex;
  margin-left: 86%;
  margin-top: -53px;
  z-index: 3;
  &--menu {
    margin-right: 16%;
    margin-top: 5px;
    margin-left: unset;
    @media (min-width: 991px) {
      margin-right: 20%;
    }
  }
}

.fa-heart-solid {
  opacity: 0; /*Fa-heart solied est placer a 0 d'opaciter pour être dissimuler.*/
  transition-duration: 0.5s;
  background: -webkit-gradient(linear, left top, left bottom, from($colour-primary), to($colour-secondary)); /*Le webkit permet de définir un Linear-grandient*/
  -webkit-background-clip: text; /*ON MET LE BACKGROUND SUR LE TEXT*/
  -webkit-text-fill-color: transparent; /*POUR QUE LE BACKGROUND S'AFFICHE SUR LE TEXTE ON REND LE TEXTE TRANSPARENT*/
}
/*https://developer.mozilla.org/fr/docs/Web/CSS/background-clip : background-clip et text-fill-color travail en commun pour permettre l'affichage du backgroound
  - Brackround-clip met le backgorund sur le texte
  - text-fill-color est utiliser pour mettre le texte transparent pour afficher le bacgkround."Pourqu'il soit visible Sinon noir"*/
.container > .fa-heart { /*Permet au coeur d'hériter du container*/
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
}
/*There are four different combinators in CSS:

Descendant selector (space)

Descendant Selector: The descendant selector matches all elements that are descendants of a specified element.
The following example selects all <p> elements inside <div> elements:

div p {
 background-color: red;
}

Child selector (>)
Child Selector: The child selector selects all elements that are the children of a specified element.
The following example selects all <p> elements that are children of a <div> element:

div > p {
 background-color: red;
}

Adjacent sibling selector (+)
Adjacent Sibling Selector: The adjacent sibling selector selects all elements that are the adjacent siblings of a specified element. 
Sibling elements must have the same parent element, and “adjacent” means “immediately following”.
The following example selects all <p> elements that are placed immediately after <div> elements:

div + p {
 background-color: red;
}

General sibling selector (~)
General Sibling Selector: The general sibling selector selects all elements that are siblings of a specified element.
The following example selects all <p> elements that are siblings of <div> elements:

div ~ p {
 background-color: red;
}

*/
input { /*Input gère l'intéraction du coeur*/
  position: absolute; /*Hérite de la position relative de container*/
  opacity: 0; /* pour ètre invisible car les coeurs nous intérrèse.*/
  cursor: pointer; /*pour ne pas détonner avec la carde sur la forme du curseur en DESKTOP*/
  width: 20px; /*Taille de la zone d'input du coeur donc son fonctionnement*/
  height: 20px;
  z-index: 3;
}
.fa-heart {
  font-size: 26px; /*Taille du coeur en font-size car 
                  font awesome mais aussi car le background 
                  est sur la taille du texte donc font size.*/
}
/*Sur le clique de la checkbox */
input:checked ~ .fa-heart-regular {
  transition-duration: 0.5s;
  opacity: 0; /*échange d'opaciter repasse a 1 quand unchecked*/
}

/*Sur le clique de la checkbox*/
input:checked ~ .fa-heart-solid {
  transition-duration: 0.5s;
  opacity: 1; /*ehcnage d'opaciter de fa-heart solid qui est de 0*/
}

#container {
  width: 200px;
  height: 200px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.loader {
  animation-name: blank;
  animation-duration: 3s;
  animation-fill-mode: forwards;
}

@keyframes blank {
  0% {
    opacity: 0;
  }
  30% {
    opacity: 0.1%;
  }
  80% {
    opacity: 0.8%;
  }
  100% {
    opacity: 1;
  }
}

@keyframes loadingspinner {
  0% {
    stroke-dasharray: 1 98;
    stroke-dashoffset: -105;
    opacity: 1;
  }
  50% {
    stroke-dasharray: 80 10;
    stroke-dashoffset: -160;
    opacity: 0.75;
  }
  100% {
    stroke-dasharray: 1 98;
    stroke-dashoffset: -300;
    opacity: 0;
    display: none;
  }
}

#spinner {
  transform-origin: center;/*Centre l'animation"*/
  animation-name: loadingspinner; /*Appel la keyframe loadingspinner*/
  animation-duration: 3s; /*Durer de jeu de l'animation"*/

  animation-iteration-count: 1; /*Nombre de fois ou l'animation est jouer "Redodant car n'arrête pas l'animation"*/
  animation-fill-mode: forwards; /*Arrête l'animation*/ 
  fill: transparent; /*Gère la couleur d'arrière plan*/
  stroke: $colour-secondary; /*Gère la couleur de chaque objet*/
  stroke-width: 7px; /* Gère l'épaisseur de chaque objet*/
  stroke-linecap: round; /*Arrondi le début et la fin de chaque objet*/
  filter: url(#shadow);
}

.checkmark {
  background-color: $colour-tertiary;
  width: 0;
  height: 117%;
  margin-top: -10px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: $colour-white;
  border-radius: 0px 17px 17px 0px;
}
.card:hover .slide-left {
  animation: slide-left 0.5s ease-in-out both;
}

.card:hover .rotate-center {
  animation: rotate-center 0.6s ease-in-out both;
}
.card:not(:hover) .slide-right {
  animation: slide-right 0.5s ease-in-out both;
}
.check {
  font-size: 26px;
}
@keyframes slide-right {
  0% {
    width: 20%;
  }
  100% {
    width: 0%;
  }
}

@keyframes slide-left {
  0% {
    width: 0%;
  }
  100% {
    width: 20%;
  }
}

@keyframes rotate-center {
  0% {
    transform: rotate(0);
  }
  100% {
    transform: rotate(360deg);
  }
}
